// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoNotas.Data;

#nullable disable

namespace ProjetoNotas.Migrations
{
    [DbContext(typeof(EscolaDataContext))]
    [Migration("20250322124640_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("AlunoDisciplina", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlunoId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("AlunoDisciplina");
                });

            modelBuilder.Entity("ClasseProfessor", b =>
                {
                    b.Property<int>("ClasseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClasseId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ClasseProfessor");
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Administrador", b =>
                {
                    b.Property<int>("AdministradorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AdministradorId");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Disciplina", b =>
                {
                    b.Property<int>("DisciplinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClasseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Text")
                        .HasColumnName("Nome");

                    b.HasKey("DisciplinaId");

                    b.HasIndex("ClasseId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Disciplina", (string)null);
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Nota", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Aluno_Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Disciplina_Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasMaxLength(4)
                        .HasColumnType("decimal(2, 2)")
                        .HasColumnName("Valor");

                    b.HasKey("NotaId");

                    b.HasIndex("Aluno_Id");

                    b.HasIndex("Disciplina_Id");

                    b.ToTable("Nota", (string)null);
                });

            modelBuilder.Entity("ProjetoNotas.Models.Aluno", b =>
                {
                    b.Property<int>("AlunoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Classe_Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Text")
                        .HasColumnName("Email");

                    b.Property<int>("Idade")
                        .HasMaxLength(2)
                        .HasColumnType("INT")
                        .HasColumnName("Idade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Text")
                        .HasColumnName("Nome");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("Text")
                        .HasColumnName("Roles");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("NText")
                        .HasColumnName("Senha");

                    b.HasKey("AlunoId");

                    b.HasIndex("Classe_Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Aluno", (string)null);
                });

            modelBuilder.Entity("ProjetoNotas.Models.Classe", b =>
                {
                    b.Property<int>("ClasseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Text")
                        .HasColumnName("Serie");

                    b.Property<string>("Turma")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("Text")
                        .HasColumnName("Turma");

                    b.HasKey("ClasseId");

                    b.ToTable("Classe", (string)null);
                });

            modelBuilder.Entity("ProjetoNotas.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Text")
                        .HasColumnName("Email");

                    b.Property<int>("Idade")
                        .HasMaxLength(2)
                        .HasColumnType("Text")
                        .HasColumnName("Idade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Text")
                        .HasColumnName("Nome");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Text")
                        .HasColumnName("Senha");

                    b.HasKey("ProfessorId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Professor", (string)null);
                });

            modelBuilder.Entity("AlunoDisciplina", b =>
                {
                    b.HasOne("ProjetoNotas.Models.Aluno", null)
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AlunoDisciplina_AlunoId");

                    b.HasOne("ProjetoNotas.Domain.Models.Disciplina", null)
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AlunoDisciplina_DisciplinaId");
                });

            modelBuilder.Entity("ClasseProfessor", b =>
                {
                    b.HasOne("ProjetoNotas.Models.Classe", null)
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ClasseProfessor_ClasseId");

                    b.HasOne("ProjetoNotas.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ClasseProfessor_ProfessorId");
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Disciplina", b =>
                {
                    b.HasOne("ProjetoNotas.Models.Classe", null)
                        .WithMany("Disciplinas")
                        .HasForeignKey("ClasseId");
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Nota", b =>
                {
                    b.HasOne("ProjetoNotas.Models.Aluno", "Aluno")
                        .WithMany("Notas")
                        .HasForeignKey("Aluno_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoNotas.Domain.Models.Disciplina", "Disciplina")
                        .WithMany("Notas")
                        .HasForeignKey("Disciplina_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_NOTA");

                    b.Navigation("Aluno");

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("ProjetoNotas.Models.Aluno", b =>
                {
                    b.HasOne("ProjetoNotas.Models.Classe", "Classe")
                        .WithMany("Alunos")
                        .HasForeignKey("Classe_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ALUNO");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("ProjetoNotas.Domain.Models.Disciplina", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("ProjetoNotas.Models.Aluno", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("ProjetoNotas.Models.Classe", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Disciplinas");
                });
#pragma warning restore 612, 618
        }
    }
}
